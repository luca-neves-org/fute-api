datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-3.0.x"]
}

enum PlayerType {
  mensalist
  diarist
}

model Footy {
  id               String       @id @default(uuid())
  created_at       DateTime     @default(now())
  updated_at       DateTime     @updatedAt
  email            String       @unique
  username         String       @unique
  name             String
  password         String
  location         String
  start_hour       DateTime
  end_hour         DateTime
  players_per_team Int?
  num_of_teams     Int?
  players          Player[]
  footy_event      FootyEvent[]

  @@map("footy")
}

model FootyEvent {
  id         String   @id @default(uuid())
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  footy_id   String
  teams      Team[]
  Footy      Footy    @relation(fields: [footy_id], references: [id])

  @@map("footy_event")
}

model Team {
  id           String       @id @default(uuid())
  created_at   DateTime     @default(now())
  updated_at   DateTime     @updatedAt
  name         String
  footyEventId String
  victories    Int
  teamPlayer   TeamPlayer[]
  footyEvent   FootyEvent?  @relation(fields: [footyEventId], references: [id])

  @@map("team")
}

model TeamPlayer {
  id       String @id @default(uuid())
  teamId   String
  playerId String
  goals    Int?
  assists  Int?
  team     Team   @relation(fields: [teamId], references: [id])
  player   Player @relation(fields: [playerId], references: [id])
}

model Player {
  id         String       @id @default(uuid())
  created_at DateTime     @default(now())
  updated_at DateTime     @updatedAt
  footy_id   String
  name       String
  stars      Int
  type       PlayerType
  footy      Footy        @relation(fields: [footy_id], references: [id])
  teamPlayer TeamPlayer[]

  @@map("player")
}
